{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "default"
        },
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "bump": {
      "name": "bump",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": {
        "OUTFILE": ".version.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12"
      },
      "steps": [
        {
          "exec": "mkdir -p dist && cp .version.json dist/"
        },
        {
          "builtin": "release/bump-version"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile"
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "python .projenrc.py"
        }
      ]
    },
    "dist": {
      "name": "dist",
      "steps": [
        {
          "exec": "mkdir -p dist"
        },
        {
          "exec": "cp .version.json dist/"
        },
        {
          "exec": "git checkout .version.json"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install and upgrade dependencies",
      "steps": [
        {
          "exec": "python -m pip install --upgrade pip"
        },
        {
          "exec": "pip install -r requirements.txt"
        },
        {
          "exec": "pip install -r requirements-dev.txt"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "spawn": "dist"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation"
    },
    "publish:git": {
      "name": "publish:git",
      "description": "Prepends the release changelog onto the project changelog, creates a release commit, and tags the release",
      "env": {
        "CHANGELOG": "dist/changelog.md",
        "RELEASE_TAG_FILE": "dist/releasetag.txt",
        "PROJECT_CHANGELOG_FILE": "",
        "VERSION_FILE": "dist/version.txt"
      },
      "steps": [
        {
          "exec": "cp dist/.version.json . && git add .version.json"
        },
        {
          "builtin": "release/tag-version"
        },
        {
          "exec": "git push --follow-tags origin main"
        }
      ],
      "condition": "git log --oneline -1 | grep -qv \"chore(release):\""
    },
    "release": {
      "name": "release",
      "description": "Prepare a release from \"main\" branch",
      "env": {
        "RELEASE": "true"
      },
      "steps": [
        {
          "exec": "rm -fr dist"
        },
        {
          "spawn": "bump"
        },
        {
          "spawn": "package"
        },
        {
          "spawn": "unbump"
        },
        {
          "exec": "git diff --ignore-space-at-eol --exit-code"
        },
        {
          "spawn": "publish:git"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "npm ci",
          "condition": "if [ -d 'node_modules' ]; then exit 0; else exit 1; fi",
          "cwd": "tests/testdata/simple-nodejs"
        },
        {
          "exec": "pytest"
        }
      ]
    },
    "unbump": {
      "name": "unbump",
      "description": "Restores version to 0.0.0",
      "env": {
        "OUTFILE": ".version.json",
        "CHANGELOG": "dist/changelog.md",
        "BUMPFILE": "dist/version.txt",
        "RELEASETAG": "dist/releasetag.txt",
        "RELEASE_TAG_PREFIX": "",
        "BUMP_PACKAGE": "commit-and-tag-version@^12"
      },
      "steps": [
        {
          "builtin": "release/reset-version"
        }
      ]
    }
  },
  "env": {
    "VIRTUAL_ENV": "$(python -c \"import os; print('{0}/venv'.format(os.getcwd()))\")",
    "PATH": "$(python -c \"import os, sys; python_dir = 'Scripts' if sys.platform == 'win32' else 'bin'; print('{0}/venv/{1}{2}{3}'.format(os.getcwd(), python_dir, os.pathsep, os.environ['PATH']))\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.py and run \"npx projen\"."
}
